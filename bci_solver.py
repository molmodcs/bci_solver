from argparse import ArgumentParser
import sys

from bci_solver_mol2tools import *
from bci_solver_optimization import *
from bci_solver_visualization import *

parser = ArgumentParser(
    prog="bci_solver",
    usage=''' BciSolver

Github Page: https://github.com/molmodcs/bci_solver

Dependencies: To properly run the script, it is first necessary to install the following dependencies;

NumPy - https://numpy.org/ - pip install numpy - conda install numpy.
SciPy - https://scipy.org/ - pip install scipy - conda install scipy.
Matplotlib - https://matplotlib.org/ - pip install matplotlib - conda install matplotlib.
SciencePlots - https://pypi.org/project/SciencePlots/ - pip install SciencePlots.
Pandas - https://pandas.pydata.org/ - pip install pandas.

User Input: 

The user must provide first if computations will be done using a single .mol2 file or using a folder of .mol2 files by choosing between either -f/--file or -F/--folder. 

Then, the user must specify if the charges which will be used for the computations will be the ones available in the .mol2 files or if they pertain to an external source. This external source must either be a single file, in case the user has previously provived a -f/--file argument, which we recomend to have the same name as the .mol2 file, or in case the user has previously provided a -F/--folder argument, it must be a folder where each file has the same name as one of the files in the folder containing the chemical structures and has charges corresponding to the .mol2 file sharing its name. The available charge formats are either .xyz, an orca .log file format or a sheet format (Pandas Dataframe,Excel,LibreOffice) following the standard outlined in: https://github.com/molmodcs/bci_solver.

The user can also choose for the output folder. If one is not provided, the generated files and folders will be saved in a default output folder generated by th script. If the user provides an output folder which doesn't exist, the script will handle it by creating the folder with the specified path.

Finally, in case the user has provided a -F/--folder argument, he can optionally choose if the labels for the chemical structures appearing in the generated graphs and histograms will be the full corresponding file names by choosing --full or if the names will be shortened to first 6 characters of the file names (default behaviour). In any case, we recommend users to choose file names with a maximum length of 6 characters.

Examples of possible user inputs:

* -f '.mol2 file path' 
* -f '.mol2 file path' -xyz 'path containing the charges which will be used for computations in .xyz format'
* -F '.mol2 folder path' -s 'path containing the charges which will be used for computations in a sheet format'
* -F '.mol2 folder path' -o 'output folder'
* -F 'mol22 folder path' --full

Technical Remarks: In the current version of the script, the user can not directly provide information about the atom types of the chemical structures. This is so because we still haven't figured out an efficient way the user can provide this information. So, in all the computations being done in this current version, there's no distinction between an atom and its corresponding atom type, i.e the same atom will always have the same atom type regardless of its role in the chemical structure. This might make some of the results slightly inaccurate. But future implementations of this program will resolve this issue.
''',
    description='''\n Script used to compute the bci values, according to the definition present in Halgren's 1996 papers on the MMFF94 force field, of a given chemical structure from the atomic charges of its constituent atoms.''')

parser.add_argument('-o','--output',help='''
specifies the output folder.
''',action='store')

parser.add_argument('--full',help='''
specifies that the labels appearing in the generated graphs and histograms will be the full .mol2 file names.
''',action='store_true')

group_file_folder = parser.add_mutually_exclusive_group()

group_file_folder.add_argument('-f', '--file', help='''specifies that computations will be done using a single .mol2 file. Argument must be the path to a .mol2 file or the file name itself if it is available in the current directory.
                   ''', action='store')

group_file_folder.add_argument('-F', '--folder', help='''specifies that computations will be done for multiple .mol2 files inside a folder. Argument must be the path to a folder containing .mol2 files or the folder name itself if it is available in the current directory.''', action='store')

group_charge_extension = parser.add_mutually_exclusive_group()

group_charge_extension.add_argument('-l', '--log', help='specifies that the atom charges for the respective .mol2 files are all available in a Orca .log format.', action='store')

group_charge_extension.add_argument('-s', '--sheet', help='specifies that the atom charges for the respective .mol2 files are all available in a sheet format.', action='store')

group_charge_extension.add_argument('-xyz', help='specifies that the atom charges for the respective .mol2 files are all available in a .xyz format', action='store')

args = parser.parse_args()

args_file_folder_parameters = [args.file,args.folder]

args_file_folder_parameters = [p for p in args_file_folder_parameters if p != None]

if args_file_folder_parameters:
    mol2_path = args_file_folder_parameters[0]
    print(mol2_path)
    
args_charge_parameters = [args.log, args.sheet, args.xyz]

args_charge_parameters = [p for p in args_charge_parameters if p != None]

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

if args.output != None and (not os.path.exists(args.output)):
    os.mkdir(os.path.abspath(args.output))

if args.output != None:
    if args.file == None and args.folder == None:
        print("Error: Either -f/--file or -F/--folder argument must be provided.")
        sys.exit(1)

if args.full != None:
    if args.folder == None:
        print("Error: -F/--folder argument must be provided.")
        sys.exit(1)
    
if not args_charge_parameters:
    
    if args.file != None:
        bci_solver_mol2(mol2_path)
    if args.folder != None: 
        mol2_folder_path = args.folder

        bci_solver_mol2_folder(mol2_path)
        bci_solver_visualizer(mol2_path,full_name=args.full)
        bci_solver_hist_visualizer(mol2_path,full_name=args.full)
else:
    charges_file_path = args_charge_parameters[0]
    if args.file == None and args.folder == None:
        print("Error: Either -f or -F argument must be provided.")
        sys.exit(1)
    else:
        if args.file != None:
            
            if args.log != None:
               mol2_path = charges_log2mol2(mol2_path,charges_file_path,output_folder=args.output)
                
            if args.xyz != None:
                
               mol2_path = charges2mol2(mol2_path,charges_file_path,output_folder=args.output)

            if args.sheet != None:

               mol2_path = dataframe2mol2(mol2_path,charges_file_path,output_folder=args.output)

            bci_solver_mol2(mol2_path,output_folder=args.output)
        
        if args.folder != None:

            if args.log != None:
                
                mol2_path = charges_log2mol2_folder(mol2_path,charges_file_path,output_folder=args.output)
                
            if args.xyz != None:
                
                mol2_path = charges2mol2_folder(mol2_path,charges_file_path,output_folder=args.output)

            if args.sheet != None:

                mol2_path = dataframe2mol2_folder(mol2_path,charges_file_path,output_folder=args.output)

            bci_solver_mol2_folder(mol2_path,output_folder=args.output)
            bci_solver_visualizer(mol2_path,output_folder=args.output,full_name=args.full)
            bci_solver_hist_visualizer(mol2_path,output_folder=args.output,full_name=args.full) 
